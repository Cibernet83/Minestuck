// Date: 31/12/2012 15:51:35
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX
package com.mraof.minestuck.client.model;

import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import com.mraof.minestuck.entity.underling.ImpEntity;
import net.minecraft.client.model.HierarchicalModel;
import net.minecraft.client.model.geom.ModelPart;
import net.minecraft.client.model.geom.PartPose;
import net.minecraft.client.model.geom.builders.CubeListBuilder;
import net.minecraft.client.model.geom.builders.LayerDefinition;
import net.minecraft.client.model.geom.builders.MeshDefinition;
import net.minecraft.client.model.geom.builders.PartDefinition;
import net.minecraft.util.Mth;

public class ImpModel<T extends ImpEntity> extends HierarchicalModel<T>
{
	private final ModelPart root;
	private final ModelPart head;
	private final ModelPart body;
	private final ModelPart leftArm, rightArm;
	private final ModelPart leftLeg, rightLeg;

	public ImpModel(ModelPart root)
	{
		this.root = root;
		head = root.getChild("head");
		body = root.getChild("body");
		leftArm = root.getChild("left_arm");
		rightArm = root.getChild("right_arm");
		leftLeg = root.getChild("left_leg");
		rightLeg = root.getChild("right_leg");
	}
	
	public static LayerDefinition createBodyLayer()
	{
		MeshDefinition mesh = new MeshDefinition();
		PartDefinition root = mesh.getRoot();
		
		root.addOrReplaceChild("head", CubeListBuilder.create().texOffs(0, 0)
						.addBox(-3, -3, -5, 5, 5, 5),
				PartPose.offset(0, 15, 0));
		root.addOrReplaceChild("body", CubeListBuilder.create().texOffs(0, 10)
						.addBox(-3, -4, -2, 5, 6, 4),
				PartPose.offset(0, 19, 0));
		root.addOrReplaceChild("left_arm", CubeListBuilder.create().texOffs(0, 20)
						.addBox(0, 0, -1, 1, 5, 1),
				PartPose.offset(2, 16, 0));
		root.addOrReplaceChild("right_arm", CubeListBuilder.create().texOffs(0, 20).mirror()
						.addBox(-1, 0, -1, 1, 5, 1),
				PartPose.offsetAndRotation(-3, 16, 0, 0, 0.0371786F, 0.0371786F));
		root.addOrReplaceChild("left_leg", CubeListBuilder.create().texOffs(4, 20)
						.addBox(-1, 0, 0, 1, 3, 1),
				PartPose.offset(-1, 21, 0));
		root.addOrReplaceChild("right_leg", CubeListBuilder.create().texOffs(4, 20).mirror()
						.addBox(0, 0, 0, 1, 3, 1),
				PartPose.offset(0, 21, 0));
		return LayerDefinition.create(mesh, 32, 32);
	}
	
	@Override
	public ModelPart root()
	{
		return root;
	}
	
	@Override
	public void renderToBuffer(PoseStack poseStack, VertexConsumer bufferIn, int packedLightIn, int packedOverlayIn, float red, float green, float blue, float alpha)
	{
		poseStack.scale(1.5f, 1.5f, 1.5f);
		poseStack.translate(0F, -0.5F, 0F);
		super.renderToBuffer(poseStack, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
	}
	
	@Override
	public void setupAnim(T entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
		this.leftLeg.xRot = Mth.cos(limbSwing * 0.6662F) * 1.4F * limbSwingAmount;
		this.rightLeg.xRot = Mth.cos(limbSwing * 0.6662F + (float)Math.PI) * 1.4F * limbSwingAmount;
	}
}
